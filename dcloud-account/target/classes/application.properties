server.port=8081
spring.application.name=dclound-account
spring.cloud.nacos.discovery.server-addr=124.222.215.26:8848
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
spring.redis.client-type=jedis
spring.redis.host=124.222.215.26
spring.redis.password=xdclass.net
spring.redis.port=6379
spring.redis.jedis.pool.host=124.222.215.26
spring.redis.jedis.pool.password=xdclass.net
spring.redis.jedis.pool.port=6379
spring.redis.jedis.pool.timeOut=2000
spring.redis.jedis.pool.max-total=100
spring.redis.jedis.pool.max-idle=50
spring.redis.jedis.pool.min-idle=10
spring.redis.jedis.pool.max-wait=60000
spring.redis.jedis.pool.testOnBorrow=true
#jedis.timeout=3000
#jedis.cluster=false
#jedis.database=0
#jedis.host=localhost
#jedis.port=6379
#jedis.password=null
#jedis.pool.max-total=100
#jedis.pool.max-idle=50
#jedis.pool.min-idle=10
#jedis.pool.max-wait=5000
#jedis.pool.testOnBorrow=true
spring.shardingsphere.datasource.names=ds0
spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://124.222.215.26:3306/dcloud_account?useUnicode=true&characterEncoding=UTF-8&useSSL=false
spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds0.maxPoolSize=50
spring.shardingsphere.datasource.ds0.minPoolSize=50
spring.shardingsphere.datasource.ds0.password=xdclass.net
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.props.sql.show=true
#配置分组雪花算法生成id策略;
spring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no

spring.shardingsphere.sharding.tables.traffic.key-generator.column=id
spring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}
spring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE

sms.app-code=31efeec6a2424df3857dccd75cbd94c8
sms.template-id=JM1000372
aliyun.oss.endpoint=oss-cn-shanghai.aliyuncs.com
aliyun.oss.accessKeyId=LTAI5tEJsvZrjSSYM1JyMnzd
aliyun.oss.accessKeySecret=VO087tPHzhlJJkdfSA3ePA8wMrOaqP
aliyun.oss.bucketName=dcloud-short-shop
aliyun.oss.objectName=111.jpg

##----------rabbit配置--------------
spring.rabbitmq.host=124.222.215.26
spring.rabbitmq.port=5672
#需要手工创建虚拟主机
spring.rabbitmq.virtual-host=dev
spring.rabbitmq.username=admin
spring.rabbitmq.password=password
#消息确认方式，manual(手动ack) 和auto(自动ack);消息消费重试达到指定次数进到异常交换机和异常队列，需要自动改为自动确认ack确认消息;
spring.rabbitmq.listener.simple.acknowledge-mode=auto

#mq配置重试
#开启重试，消费者代码不能添加try catch捕获不往外抛异常
#开启配置
spring.rabbitmq.listener.simple.retry.enabled=true
#最大重试次数
spring.rabbitmq.listener.simple.retry.max-attempts=4
# 重试消息的时间间隔，5秒
spring.rabbitmq.listener.simple.retry.initial-interval=5000
